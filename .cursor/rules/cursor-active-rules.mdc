---
description: Basisinstruktioner för Genesis-Core agentsessioner
alwaysApply: true
---

# Masterregel
- Övervaka kontextlängd; om chatten riskerar tappa sammanhang, pausa, summera läget och be om ny session.

# Arbetsprinciper
- Arbeta stegvis, systematiskt och metodiskt.
- Svara på svenska om inget annat anges.
- Håll diskussion och exakta kommandon åtskilda.
- Var tydlig med osäkerheter och bekräfta stabil status (t.ex. ✅ REST auth fixad).
- Sammanfatta beslut före nästa huvudmoment och avsluta block med mini-logg.
- Fråga användaren om fortsatt arbete innan längre sekvenser.

# Effektiv kontexthantering
- Referera filer med fulla sökvägar.
- Håll kodexempel korta; dela upp längre i sektioner.
- Använd TODO-lista (`todo_write`) för uppgifter med flera steg.
- Uppdatera användaren när arbetsmoment är klara.

# Stabiliseringsfas
- Varje kodrad ska lösa ett konkret problem eller höja tillförlitlighet, prestanda eller läsbarhet.
- Följ Change Policy, Green-Light-checklistan och fokusområdena i `reference-guide.md`.
- Håll diffar < 100 rader och skriv tester direkt för ny logik.

# Optuna/optimizer-körningar - KRITISK VALIDERING
Innan NÅGON Optuna-körning som tar >30 minuter MÅSTE följande valideras:
1. Kör `python scripts/validate_optimizer_config.py <config.yaml>` - MÅSTE returnera 0
2. Championens kritiska parametrar (partial_1_pct, partial_2_pct, signal_adaptation, etc.) MÅSTE finnas i sökrymden
3. Fixerade värden MÅSTE matcha championens värden (eller vara medvetna avvikelser med motivering)
4. Championens parametrar MÅSTE kunna reproduceras i sökrymden
5. Testa championens exakta parametrar på samma tidsperiod först (snabbtest) för att verifiera baseline
6. Om validering misslyckas: FIXA konfigurationen först, kör ALDRIG innan validering passerar

# Workflow (sammandrag)
1. Före ändringar: `read_file` → `codebase_search` → `grep` → `todo_write`.
2. Utförande: använd edit-verktyg, föredra att uppdatera befintliga filer, lägg till docstrings och imports.
3. Validering: kör `pytest`, `black --check`, `ruff check`, `bandit`.
4. Git: undvik känsliga filer, använd beskrivande commit-prefix, uppdatera `.gitignore` vid behov.
5. Dokumentation: kontrollera befintliga README/TODO innan nya skapas.

# Säkerhet
- API-nycklar endast via miljövariabler.
- Paper trading måste använda TEST-symboler.
- Signering: `json.dumps(body, separators=(",", ":"))`.
- Lägg aldrig till `.env`, `.nonce_tracker.json`, `dev.overrides.local.json` i git.

# Planläge
- Föreslå Plan Mode för nya features, större refactorings, ML/indikatorarbete eller flera möjliga implementationer.
- För bugfixar, code quality och dokumentation stanna i Normal Mode.

# Svarsstil
- Strukturera svaret med rubriker och ✅ status.
- Lista risker/problem före översikter och avsluta med nästa steg (tester/validering).
- Ange vad som är osäkert eller återstår att verifiera.

För detaljerade regler, se `reference-guide.md`.
